// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/paq1/Lexer.flex


package paq1;
import static paq1.Tokens.*;
import java.util.Map;
import java.util.LinkedHashMap;

class Token {
    public String lexema;
    public String token;
    public int nLinea;

    public Token(String lexema, String token, int nLinea) {
        this.lexema = lexema;
        this.token = token;
        this.nLinea = nLinea;
    }

    public String getLexema() {
        return lexema;
    }

    public void setLexema(String lexema) {
        this.lexema = lexema;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public int getnLinea() {
        return nLinea;
    }

    public void setnLinea(int nLinea) {
        this.nLinea = nLinea;
    }
    
    @Override
    public String toString() {
        return super.toString(); 
    }
    
    
}


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\11\25\1\26\1\27\1\30\1\31\1\32\2\0\4\10"+
    "\1\33\25\10\1\34\1\35\1\36\1\0\1\10\1\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\10\1\50\1\51\1\52\1\53\1\54\1\10"+
    "\1\55\1\56\1\57\1\60\1\61\4\10\1\62\1\63"+
    "\1\64\7\0\1\3\33\0\1\65\37\0\272\10\u01ad\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\1\1\16\1\17\1\1\1\20\1\21\1\22\14\4"+
    "\1\23\1\1\1\24\1\1\1\25\1\0\1\26\1\1"+
    "\1\27\3\0\1\2\2\0\1\30\1\31\1\32\1\33"+
    "\4\4\1\0\10\4\1\0\2\4\1\34\1\4\1\35"+
    "\1\36\3\0\1\15\1\0\2\15\3\4\1\37\1\4"+
    "\1\40\4\4\1\41\3\4\1\42\4\4\1\0\1\2"+
    "\2\0\11\4\1\43\2\4\1\44\2\4\1\45\1\4"+
    "\1\0\5\4\1\46\2\4\1\47\5\4\1\15\1\4"+
    "\1\50\1\4\1\51\14\4\1\52\1\4\1\53\3\4"+
    "\1\54\1\55\1\56\1\57\1\60\1\4\1\61\2\4"+
    "\1\62\3\4\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\242\0\330\0\66"+
    "\0\u010e\0\u0144\0\66\0\66\0\66\0\66\0\66\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\66\0\u0288\0\u02be\0\u02f4"+
    "\0\66\0\66\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\66\0\u05b2"+
    "\0\66\0\u05e8\0\66\0\u061e\0\66\0\u0654\0\66\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\66\0\66\0\66"+
    "\0\66\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\66\0\66\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u0b9a\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\330"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\330\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u0bd0\0\u10aa\0\u0c72\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\330\0\u12c6\0\u12fc\0\330"+
    "\0\u1332\0\u1368\0\330\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\330\0\u1518\0\u154e\0\330\0\u1584\0\u15ba"+
    "\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\330\0\u16fe\0\330"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\330\0\u19bc\0\330\0\u19f2"+
    "\0\u1a28\0\u1a5e\0\330\0\330\0\330\0\330\0\330\0\u1a94"+
    "\0\330\0\u1aca\0\u1b00\0\330\0\u1b36\0\u1b6c\0\u1ba2\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\2\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\7\1\31\1\2\1\32\1\7\1\33"+
    "\1\34\1\35\1\36\1\37\1\7\1\40\1\41\1\42"+
    "\1\43\2\7\1\44\1\7\1\45\2\7\1\46\1\47"+
    "\1\50\1\51\1\52\70\0\1\3\63\0\7\6\1\53"+
    "\25\6\1\54\30\6\10\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\23\7\16\0\1\55\53\0\13\56\1\57"+
    "\21\56\1\60\30\56\24\0\1\61\1\23\56\0\1\62"+
    "\4\0\1\63\64\0\1\64\65\0\1\65\1\0\2\23"+
    "\71\0\1\66\65\0\1\67\65\0\1\70\65\0\1\71"+
    "\44\0\1\7\13\0\2\7\5\0\1\7\3\0\14\7"+
    "\1\72\6\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\1\73\22\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\4\7\1\74\16\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\13\7\1\75\7\7\14\0"+
    "\1\7\11\0\1\76\1\0\2\7\5\0\1\7\3\0"+
    "\1\77\10\7\1\100\7\7\1\101\1\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\1\102\22\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\13\7\1\103"+
    "\7\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\4\7\1\104\16\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\10\7\1\105\3\7\1\106\6\7\14\0"+
    "\1\7\11\0\1\107\1\0\2\7\5\0\1\7\3\0"+
    "\1\110\15\7\1\111\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\10\7\1\112\12\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\4\7\1\113\16\7"+
    "\67\0\1\114\33\0\1\115\34\0\2\6\4\0\60\6"+
    "\13\0\1\57\52\0\2\56\4\0\60\56\22\0\1\116"+
    "\43\0\16\117\1\120\47\117\2\63\1\3\2\63\1\4"+
    "\60\63\24\0\1\121\1\122\64\0\1\123\1\124\50\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\14\7\1\125"+
    "\6\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\3\7\1\126\12\7\1\127\4\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\2\7\1\130\20\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\20\7\1\131"+
    "\2\7\14\0\1\132\22\0\1\132\3\0\23\132\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\11\7\1\133"+
    "\11\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\14\7\1\134\6\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\13\7\1\135\7\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\2\7\1\136\20\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\2\7\1\137"+
    "\20\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\4\7\1\140\16\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\4\7\1\141\16\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\17\7\1\142\3\7\14\0"+
    "\1\143\22\0\1\143\3\0\23\143\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\16\7\1\144\4\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\14\7\1\145"+
    "\6\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\13\7\1\146\7\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\16\7\1\147\4\7\30\0\1\116\1\122"+
    "\40\0\16\117\1\150\65\117\1\150\4\117\1\151\42\117"+
    "\24\0\1\116\1\122\5\0\1\152\7\0\1\152\46\0"+
    "\1\153\1\124\64\0\1\153\1\124\5\0\1\152\7\0"+
    "\1\152\32\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\11\7\1\154\11\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\4\7\1\155\16\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\1\156\22\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\4\7\1\157\7\7"+
    "\1\160\6\7\14\0\1\132\13\0\2\132\5\0\1\132"+
    "\3\0\23\132\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\17\7\1\161\3\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\20\7\1\162\2\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\2\7\1\163\20\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\4\7"+
    "\1\164\16\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\16\7\1\165\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\13\7\1\166\7\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\20\7\1\167\2\7"+
    "\14\0\1\143\13\0\2\143\5\0\1\143\3\0\23\143"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\1\170"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\2\7\1\171\3\7\1\172\14\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\14\7\1\173\6\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\3\7\1\174"+
    "\17\7\4\0\16\117\1\150\4\117\1\3\42\117\17\0"+
    "\1\175\1\0\1\175\54\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\4\7\1\176\16\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\13\7\1\177\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\2\7\1\200"+
    "\20\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\16\7\1\201\4\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\13\7\1\202\7\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\14\7\1\203\6\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\1\204\22\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\10\7"+
    "\1\205\12\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\16\7\1\206\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\20\7\1\207\2\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\16\7\1\210\4\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\4\7"+
    "\1\211\16\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\16\7\1\212\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\1\213\22\7\31\0\1\214\50\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\1\215\22\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\1\216"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\20\7\1\217\2\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\14\7\1\220\6\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\2\7\1\221\20\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\13\7\1\222"+
    "\7\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\14\7\1\223\6\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\16\7\1\224\4\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\1\225\22\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\3\7\1\226\17\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\1\227"+
    "\22\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\3\7\1\230\17\7\30\0\2\214\50\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\13\7\1\231\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\4\7\1\232"+
    "\16\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\4\7\1\233\16\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\20\7\1\234\2\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\13\7\1\235\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\1\236\22\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\16\7"+
    "\1\237\4\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\10\7\1\240\12\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\12\7\1\241\10\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\4\7\1\242\16\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\14\7"+
    "\1\243\6\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\16\7\1\244\4\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\17\7\1\245\3\7\14\0\1\7"+
    "\13\0\2\7\5\0\1\7\3\0\4\7\1\246\16\7"+
    "\14\0\1\7\13\0\2\7\5\0\1\7\3\0\17\7"+
    "\1\247\3\7\14\0\1\7\13\0\2\7\5\0\1\7"+
    "\3\0\12\7\1\250\10\7\14\0\1\7\13\0\2\7"+
    "\5\0\1\7\3\0\1\251\22\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\16\7\1\252\4\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\10\7\1\253"+
    "\12\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\14\7\1\254\6\7\14\0\1\7\13\0\2\7\5\0"+
    "\1\7\3\0\4\7\1\255\16\7\14\0\1\7\13\0"+
    "\2\7\5\0\1\7\3\0\13\7\1\256\7\7\14\0"+
    "\1\7\13\0\2\7\5\0\1\7\3\0\20\7\1\257"+
    "\2\7\14\0\1\7\13\0\2\7\5\0\1\7\3\0"+
    "\14\7\1\260\6\7\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7128];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\2\1\5\11"+
    "\5\1\1\11\3\1\2\11\14\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\1\1\1\11\3\0\1\1"+
    "\2\0\4\11\4\1\1\0\10\1\1\0\4\1\2\11"+
    "\3\0\1\1\1\0\25\1\1\0\1\1\2\0\21\1"+
    "\1\0\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
   public String lexeme;
   InfoTokens t = new InfoTokens();
   Map<String,Token> tablaSimbolos = new LinkedHashMap<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); return ERROR;
            }
          // fall through
          case 52: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 53: break;
          case 3:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"!",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Negacion;
            }
          // fall through
          case 54: break;
          case 4:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"id",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return id;
            }
          // fall through
          case 55: break;
          case 5:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"%",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Factorial;
            }
          // fall through
          case 56: break;
          case 6:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"(",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return AbreParentesis;
            }
          // fall through
          case 57: break;
          case 7:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),")",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return CierraParentesis;
            }
          // fall through
          case 58: break;
          case 8:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"*",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Producto;
            }
          // fall through
          case 59: break;
          case 9:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"+",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Suma;
            }
          // fall through
          case 60: break;
          case 10:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),",",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Coma;
            }
          // fall through
          case 61: break;
          case 11:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"-",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Resta;
            }
          // fall through
          case 62: break;
          case 12:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"/",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Division;
            }
          // fall through
          case 63: break;
          case 13:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"num",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return num;
            }
          // fall through
          case 64: break;
          case 14:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),";",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return PuntoComa;
            }
          // fall through
          case 65: break;
          case 15:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"<",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Menor;
            }
          // fall through
          case 66: break;
          case 16:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),">",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Mayor;
            }
          // fall through
          case 67: break;
          case 17:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"[",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return AbreCorchete;
            }
          // fall through
          case 68: break;
          case 18:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"]",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return CierraCorchete;
            }
          // fall through
          case 69: break;
          case 19:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"{",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return AbreLLave;
            }
          // fall through
          case 70: break;
          case 20:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"}",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return CierreLLave;
            }
          // fall through
          case 71: break;
          case 21:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"litcad",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return litcad;
            }
          // fall through
          case 72: break;
          case 22:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"&&",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return AND;
            }
          // fall through
          case 73: break;
          case 23:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"litcar",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return litcar;
            }
          // fall through
          case 74: break;
          case 24:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),":=",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Igual;
            }
          // fall through
          case 75: break;
          case 25:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"@",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return mI;
            }
          // fall through
          case 76: break;
          case 26:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"==",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return DobleIgual;
            }
          // fall through
          case 77: break;
          case 27:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"#",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return MI;
            }
          // fall through
          case 78: break;
          case 28:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"si",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return si;
            }
          // fall through
          case 79: break;
          case 29:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"||",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return OR;
            }
          // fall through
          case 80: break;
          case 30:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"¡=",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return Diferencia;
            }
          // fall through
          case 81: break;
          case 31:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"dec",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return dec;
            }
          // fall through
          case 82: break;
          case 32:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"idf",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return idf;
            }
          // fall through
          case 83: break;
          case 33:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"inc",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return inc;
            }
          // fall through
          case 84: break;
          case 34:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"idp",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return idp;
            }
          // fall through
          case 85: break;
          case 35:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"leer",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return leer;
            }
          // fall through
          case 86: break;
          case 36:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"para",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return para;
            }
          // fall through
          case 87: break;
          case 37:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"sino",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return sino;
            }
          // fall through
          case 88: break;
          case 38:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"falso",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return falso;
            }
          // fall through
          case 89: break;
          case 39:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"hacer",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return hacer;
            }
          // fall through
          case 90: break;
          case 40:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"cadena",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return cadena;
            }
          // fall through
          case 91: break;
          case 41:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"entero",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return entero;
            }
          // fall through
          case 92: break;
          case 42:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"funcion",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return funcion;
            }
          // fall through
          case 93: break;
          case 43:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"mostrar",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return mostrar;
            }
          // fall through
          case 94: break;
          case 44:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"booleano",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return booleano;
            }
          // fall through
          case 95: break;
          case 45:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"caracter",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return caracter;
            }
          // fall through
          case 96: break;
          case 46:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"entonces",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return entonces;
            }
          // fall through
          case 97: break;
          case 47:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"flotante",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return flotante;
            }
          // fall through
          case 98: break;
          case 48:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"mientras",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return mientras;
            }
          // fall through
          case 99: break;
          case 49:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"programa",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return programa;
            }
          // fall through
          case 100: break;
          case 50:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"verdadero",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return verdadero;
            }
          // fall through
          case 101: break;
          case 51:
            { t.numeroLinea=yyline; t.lexema=yytext(); lexeme=yytext(); Token t1 = new Token(yytext(),"procedimiento",yyline); tablaSimbolos.put(yytext()+yyline+yycolumn,t1); return procedimiento;
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
